{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///Users/disco_lu/link-share-pwa/app/api/auth/verify-code/route.ts"],"sourcesContent":["import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'\nimport { cookies } from 'next/headers'\nimport { NextResponse } from 'next/server'\n\nexport async function POST(request: Request) {\n  try {\n    console.log('Verify code API called')\n    const { email, code } = await request.json()\n    console.log('Email and code received:', { email, code })\n\n    const supabase = createRouteHandlerClient({ cookies })\n\n    // First check if the code exists and is valid\n    console.log('Checking if code exists and is valid...')\n    const { data: codeData, error: codeError } = await supabase\n      .from('email_codes')\n      .select('*')\n      .eq('email', email)\n      .eq('code', code)\n      .eq('used', false)\n      .gt('expires_at', new Date().toISOString())\n      .single()\n\n    if (codeError) {\n      console.error('Error checking code:', codeError)\n      console.error('Error details:', {\n        message: codeError.message,\n        details: codeError.details,\n        hint: codeError.hint,\n        code: codeError.code\n      })\n      return NextResponse.json(\n        { error: 'Invalid or expired code' },\n        { status: 400 }\n      )\n    }\n\n    if (!codeData) {\n      console.log('Code not found or already used')\n      // Let's check what codes exist for this email\n      const { data: existingCodes, error: listError } = await supabase\n        .from('email_codes')\n        .select('*')\n        .eq('email', email)\n        .order('created_at', { ascending: false })\n        .limit(5)\n\n      if (listError) {\n        console.error('Error listing existing codes:', listError)\n      } else {\n        console.log('Recent codes for this email:', existingCodes)\n      }\n      return NextResponse.json(\n        { error: 'Invalid or expired code' },\n        { status: 400 }\n      )\n    }\n\n    console.log('Code found and valid:', codeData)\n\n    // Mark the code as used\n    console.log('Marking code as used...')\n    const { error: updateError } = await supabase\n      .from('email_codes')\n      .update({ used: true })\n      .eq('id', codeData.id)\n\n    if (updateError) {\n      console.error('Error marking code as used:', updateError)\n      return NextResponse.json(\n        { error: 'Failed to verify code' },\n        { status: 500 }\n      )\n    }\n\n    // Create or get user profile\n    console.log('Creating/getting user profile...')\n    const { data: { user }, error: userError } = await supabase.auth.signUp({\n      email,\n      password: code, // Use the code as a one-time password\n      options: {\n        emailRedirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`\n      }\n    })\n\n    if (userError) {\n      console.error('Error creating user:', userError)\n      return NextResponse.json(\n        { error: 'Failed to create user account' },\n        { status: 500 }\n      )\n    }\n\n    if (!user) {\n      console.error('No user returned')\n      return NextResponse.json(\n        { error: 'Failed to create user account' },\n        { status: 500 }\n      )\n    }\n\n    console.log('User created/updated successfully')\n\n    // Create a session\n    console.log('Creating session...')\n    const { data: { session }, error: sessionError } = await supabase.auth.signInWithPassword({\n      email,\n      password: code\n    })\n\n    if (sessionError) {\n      console.error('Error creating session:', sessionError)\n      return NextResponse.json(\n        { error: 'Failed to create session' },\n        { status: 500 }\n      )\n    }\n\n    if (!session) {\n      console.error('No session returned')\n      return NextResponse.json(\n        { error: 'Failed to create session' },\n        { status: 500 }\n      )\n    }\n\n    console.log('Session created successfully')\n\n    // Set the session cookie\n    const response = NextResponse.json({ \n      success: true,\n      message: 'Successfully logged in'\n    })\n    response.cookies.set('sb-access-token', session.access_token, {\n      path: '/',\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax',\n    })\n    response.cookies.set('sb-refresh-token', session.refresh_token, {\n      path: '/',\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax',\n    })\n    return response\n  } catch (error) {\n    console.error('Error in verify-code API:', error)\n    if (error instanceof Error) {\n      console.error('Error details:', {\n        name: error.name,\n        message: error.message,\n        stack: error.stack\n      })\n    }\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'Failed to verify code' },\n      { status: 500 }\n    )\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,IAAI;QAC1C,QAAQ,GAAG,CAAC,4BAA4B;YAAE;YAAO;QAAK;QAEtD,MAAM,WAAW,CAAA,GAAA,0KAAA,CAAA,2BAAwB,AAAD,EAAE;YAAE,SAAA,iIAAA,CAAA,UAAO;QAAC;QAEpD,8CAA8C;QAC9C,QAAQ,GAAG,CAAC;QACZ,MAAM,EAAE,MAAM,QAAQ,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,SAChD,IAAI,CAAC,eACL,MAAM,CAAC,KACP,EAAE,CAAC,SAAS,OACZ,EAAE,CAAC,QAAQ,MACX,EAAE,CAAC,QAAQ,OACX,EAAE,CAAC,cAAc,IAAI,OAAO,WAAW,IACvC,MAAM;QAET,IAAI,WAAW;YACb,QAAQ,KAAK,CAAC,wBAAwB;YACtC,QAAQ,KAAK,CAAC,kBAAkB;gBAC9B,SAAS,UAAU,OAAO;gBAC1B,SAAS,UAAU,OAAO;gBAC1B,MAAM,UAAU,IAAI;gBACpB,MAAM,UAAU,IAAI;YACtB;YACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,UAAU;YACb,QAAQ,GAAG,CAAC;YACZ,8CAA8C;YAC9C,MAAM,EAAE,MAAM,aAAa,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,SACrD,IAAI,CAAC,eACL,MAAM,CAAC,KACP,EAAE,CAAC,SAAS,OACZ,KAAK,CAAC,cAAc;gBAAE,WAAW;YAAM,GACvC,KAAK,CAAC;YAET,IAAI,WAAW;gBACb,QAAQ,KAAK,CAAC,iCAAiC;YACjD,OAAO;gBACL,QAAQ,GAAG,CAAC,gCAAgC;YAC9C;YACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC,yBAAyB;QAErC,wBAAwB;QACxB,QAAQ,GAAG,CAAC;QACZ,MAAM,EAAE,OAAO,WAAW,EAAE,GAAG,MAAM,SAClC,IAAI,CAAC,eACL,MAAM,CAAC;YAAE,MAAM;QAAK,GACpB,EAAE,CAAC,MAAM,SAAS,EAAE;QAEvB,IAAI,aAAa;YACf,QAAQ,KAAK,CAAC,+BAA+B;YAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwB,GACjC;gBAAE,QAAQ;YAAI;QAElB;QAEA,6BAA6B;QAC7B,QAAQ,GAAG,CAAC;QACZ,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,MAAM,CAAC;YACtE;YACA,UAAU;YACV,SAAS;gBACP,iBAAiB,GAAG,QAAQ,GAAG,CAAC,oBAAoB,CAAC,cAAc,CAAC;YACtE;QACF;QAEA,IAAI,WAAW;YACb,QAAQ,KAAK,CAAC,wBAAwB;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgC,GACzC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,MAAM;YACT,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgC,GACzC;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC;QAEZ,mBAAmB;QACnB,QAAQ,GAAG,CAAC;QACZ,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,OAAO,YAAY,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,kBAAkB,CAAC;YACxF;YACA,UAAU;QACZ;QAEA,IAAI,cAAc;YAChB,QAAQ,KAAK,CAAC,2BAA2B;YACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2B,GACpC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,SAAS;YACZ,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2B,GACpC;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC;QAEZ,yBAAyB;QACzB,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACjC,SAAS;YACT,SAAS;QACX;QACA,SAAS,OAAO,CAAC,GAAG,CAAC,mBAAmB,QAAQ,YAAY,EAAE;YAC5D,MAAM;YACN,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;QACZ;QACA,SAAS,OAAO,CAAC,GAAG,CAAC,oBAAoB,QAAQ,aAAa,EAAE;YAC9D,MAAM;YACN,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;QACZ;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,IAAI,iBAAiB,OAAO;YAC1B,QAAQ,KAAK,CAAC,kBAAkB;gBAC9B,MAAM,MAAM,IAAI;gBAChB,SAAS,MAAM,OAAO;gBACtB,OAAO,MAAM,KAAK;YACpB;QACF;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAAwB,GAC1E;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}