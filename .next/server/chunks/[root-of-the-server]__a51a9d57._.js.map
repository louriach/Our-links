{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///Users/disco_lu/link-share-pwa/app/api/auth/clear-limits/route.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\nimport { NextResponse } from 'next/server'\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n)\n\nexport async function POST(request: Request) {\n  try {\n    console.log('Starting to clear all rate limits...')\n\n    // First, let's see what's in the rate limits table\n    const { data: existingLimits, error: selectError } = await supabase\n      .from('email_rate_limits')\n      .select('*')\n\n    if (selectError) {\n      console.error('Error selecting rate limits:', selectError)\n    } else {\n      console.log('Existing rate limits:', existingLimits)\n    }\n\n    // Clear all rate limits\n    const { error: rateLimitError } = await supabase\n      .from('email_rate_limits')\n      .delete()\n      .neq('email', '') // Delete all records\n\n    if (rateLimitError) {\n      console.error('Error clearing rate limits:', rateLimitError)\n      return NextResponse.json(\n        { error: rateLimitError.message },\n        { status: 500 }\n      )\n    }\n\n    console.log('Successfully cleared all rate limits')\n\n    // Mark all active codes as used\n    const { error: codeError } = await supabase\n      .from('email_codes')\n      .update({ used: true })\n      .eq('used', false)\n      .gt('expires_at', new Date().toISOString())\n\n    if (codeError) {\n      console.error('Error clearing codes:', codeError)\n      return NextResponse.json(\n        { error: codeError.message },\n        { status: 500 }\n      )\n    }\n\n    console.log('Successfully marked all active codes as used')\n\n    // Verify the rate limits are cleared\n    const { data: remainingLimits, error: verifyError } = await supabase\n      .from('email_rate_limits')\n      .select('*')\n\n    if (verifyError) {\n      console.error('Error verifying rate limits:', verifyError)\n    } else {\n      console.log('Remaining rate limits after clear:', remainingLimits)\n    }\n\n    return NextResponse.json({ \n      success: true,\n      message: 'All rate limits and active codes have been cleared'\n    })\n  } catch (error) {\n    console.error('Error in clear-limits API:', error)\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'Failed to clear limits' },\n      { status: 500 }\n    )\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD;AAKrB,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,mDAAmD;QACnD,MAAM,EAAE,MAAM,cAAc,EAAE,OAAO,WAAW,EAAE,GAAG,MAAM,SACxD,IAAI,CAAC,qBACL,MAAM,CAAC;QAEV,IAAI,aAAa;YACf,QAAQ,KAAK,CAAC,gCAAgC;QAChD,OAAO;YACL,QAAQ,GAAG,CAAC,yBAAyB;QACvC;QAEA,wBAAwB;QACxB,MAAM,EAAE,OAAO,cAAc,EAAE,GAAG,MAAM,SACrC,IAAI,CAAC,qBACL,MAAM,GACN,GAAG,CAAC,SAAS,IAAI,qBAAqB;;QAEzC,IAAI,gBAAgB;YAClB,QAAQ,KAAK,CAAC,+BAA+B;YAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,eAAe,OAAO;YAAC,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC;QAEZ,gCAAgC;QAChC,MAAM,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,SAChC,IAAI,CAAC,eACL,MAAM,CAAC;YAAE,MAAM;QAAK,GACpB,EAAE,CAAC,QAAQ,OACX,EAAE,CAAC,cAAc,IAAI,OAAO,WAAW;QAE1C,IAAI,WAAW;YACb,QAAQ,KAAK,CAAC,yBAAyB;YACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,UAAU,OAAO;YAAC,GAC3B;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC;QAEZ,qCAAqC;QACrC,MAAM,EAAE,MAAM,eAAe,EAAE,OAAO,WAAW,EAAE,GAAG,MAAM,SACzD,IAAI,CAAC,qBACL,MAAM,CAAC;QAEV,IAAI,aAAa;YACf,QAAQ,KAAK,CAAC,gCAAgC;QAChD,OAAO;YACL,QAAQ,GAAG,CAAC,sCAAsC;QACpD;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAAyB,GAC3E;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}