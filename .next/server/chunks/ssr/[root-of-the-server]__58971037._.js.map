{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/disco_lu/link-share-pwa/app/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nif (!process.env.NEXT_PUBLIC_SUPABASE_URL) {\n  throw new Error('Missing env.NEXT_PUBLIC_SUPABASE_URL')\n}\nif (!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n  throw new Error('Missing env.NEXT_PUBLIC_SUPABASE_ANON_KEY')\n}\n\nconsole.log('Initializing Supabase client with URL:', process.env.NEXT_PUBLIC_SUPABASE_URL)\n\nexport const supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n  {\n    auth: {\n      persistSession: true,\n      autoRefreshToken: true,\n      detectSessionInUrl: true\n    }\n  }\n) "],"names":[],"mappings":";;;AAAA;;AAEA,uCAA2C;;AAE3C;AACA,uCAAgD;;AAEhD;AAEA,QAAQ,GAAG,CAAC;AAEL,MAAM,WAAW,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,sUAGjC;IACE,MAAM;QACJ,gBAAgB;QAChB,kBAAkB;QAClB,oBAAoB;IACtB;AACF","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///Users/disco_lu/link-share-pwa/app/context/AuthContext.tsx"],"sourcesContent":["'use client'\n\nimport { createContext, useContext, useEffect, useState } from 'react'\nimport { Session, User } from '@supabase/supabase-js'\nimport { supabase } from '@/app/lib/supabase'\n\ntype AuthContextType = {\n  session: Session | null\n  user: User | null\n  loading: boolean\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  session: null,\n  user: null,\n  loading: true,\n})\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [session, setSession] = useState<Session | null>(null)\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session)\n      setUser(session?.user ?? null)\n      setLoading(false)\n    })\n\n    // Listen for auth changes\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session)\n      setUser(session?.user ?? null)\n      setLoading(false)\n    })\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  return (\n    <AuthContext.Provider value={{ session, user, loading }}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n} "],"names":[],"mappings":";;;;;AAEA;AAEA;AAJA;;;;AAYA,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAAmB;IACjD,SAAS;IACT,MAAM;IACN,SAAS;AACX;AAEO,SAAS,aAAa,EAAE,QAAQ,EAAiC;IACtE,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAkB;IACvD,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,sBAAsB;QACtB,sHAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE;YACpD,WAAW;YACX,QAAQ,SAAS,QAAQ;YACzB,WAAW;QACb;QAEA,0BAA0B;QAC1B,MAAM,EACJ,MAAM,EAAE,YAAY,EAAE,EACvB,GAAG,sHAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,QAAQ;YAC3C,WAAW;YACX,QAAQ,SAAS,QAAQ;YACzB,WAAW;QACb;QAEA,OAAO,IAAM,aAAa,WAAW;IACvC,GAAG,EAAE;IAEL,qBACE,8OAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAS;YAAM;QAAQ;kBACnD;;;;;;AAGP;AAEO,MAAM,UAAU;IACrB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}}]
}